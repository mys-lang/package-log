func get_logger(name: string) -> Logger:
    """Get the logger with given name. Creates a new logger if it does not
    already exist. The global variable LOGGERS contains all loggers
    created by this function.

    """

    logger = LOGGERS.get(name, None)

    if logger is None:
        logger = Logger(name, Level.Warning)
        LOGGERS[name] = logger

    return logger

class Logger:
    """A logger.

    This class is normally not instantiated directly by the
    user. Instead, use `get_logger()` to create instances.

    """

    _name: string
    level: Level

    func __init__(self, name: string, level: Level = Level.Warning):
        """Initialize the logger object with given name and level.

        """

        self._name = name
        self.level = level

    func is_enabled_for(self, level: Level) -> bool:
        """Returns True is given level is enabled, otherwise False.

        """

        return level >= self.level

    func error(self, message: lazy[string]):
        """Log given error message.

        """

        self._log(message, Level.Error)

    func warning(self, message: lazy[string]):
        """Log given warning message.

        """

        self._log(message, Level.Warning)

    func info(self, message: lazy[string]):
        """Log given info message.

        """

        self._log(message, Level.Info)

    func debug(self, message: lazy[string]):
        """Log given debug message.

        """

        self._log(message, Level.Debug)

    func _log(self, message: lazy[string], level: Level):
        if self.is_enabled_for(level):
            HANDLER.write(FORMATTER.format(self._name, level, message))

LOGGERS: {string: Logger} = {}
"""A dictionary of all known loggers.

"""

HANDLER: Handler = StdoutHandler()
"""The handler which all log messages are written to.

"""

FORMATTER: Formatter = DefaultFormatter()
"""The formatter that formats all messages.

"""

@enum
class Level:
    """Logging levels.

    """

    Debug = 0
    Info = 1
    Warning = 2
    Error = 3

# Use Enum values later?
_LEVEL_STRINGS: [string] = [
    "DEBUG",
    "INFO",
    "WARNING",
    "ERROR"
]

@trait
class Handler:
    """Log entry output handler trait.

    """

    func write(self, message: string):
        """Write given message to desired location.

        """

class StdoutHandler(Handler):
    """Writes log messages to standard output.

    """

    func write(self, message: string):
        """Writes given log message to standard output.

        """

        print(message)

@trait
class Formatter:
    """Log entry formatter trait.

    """

    func format(self, logger_name: string, level: Level, message: string) -> string:
        """Returns a formatted log message.

        """

class DefaultFormatter(Formatter):
    """Default log entry formatter.

    """

    func format(self, logger_name: string, level: Level, message: string) -> string:
        """Formats a log message on the format <logger name> <level> <message>
        and returns it.

        """

        return f"{logger_name} {_LEVEL_STRINGS[i64(level)]} {message}"

@test
func test_default_handler():
    logger = Logger("my-logger")

    logger.error(f"Message: {1 + 1}")
    logger.warning(f"Message: {2 + 2}")
    logger.info(f"Message: {3 + 3}")
    logger.debug(f"Message: {4 + 4}")

class _BufferHandler(Handler):
    entries: [string]

    func write(self, message: string):
        self.entries.append(message)

func _setup_buffer_handler() -> (_BufferHandler, Handler):
    default_handler = HANDLER
    handler = _BufferHandler([])
    HANDLER = handler

    return handler, default_handler

@test
func test_buffer_handler():
    handler, default_handler = _setup_buffer_handler()
    logger = Logger("my-logger", Level.Info)

    logger.info("Message 1")
    logger.debug("Message 2")
    logger.info("Message 3")

    assert handler.entries == ["my-logger INFO Message 1",
                               "my-logger INFO Message 3"]

    HANDLER = default_handler

class _CounterFormatter(Formatter):
    count: i64

    func format(self, logger_name: string, level: Level, message: string) -> string:
        self.count += 1

        return f"{self.count}: {message}"

func _setup_counter_formatter() -> (_CounterFormatter, Formatter):
    default_formatter = FORMATTER
    formatter = _CounterFormatter(0)
    FORMATTER = formatter

    return formatter, default_formatter

@test
func test_my_formatter():
    handler, default_handler = _setup_buffer_handler()
    formatter, default_formatter = _setup_counter_formatter()
    logger = Logger("my-logger")

    logger.warning("Message a")
    logger.error("Message b")

    assert handler.entries == ["1: Message a",
                               "2: Message b"]

    HANDLER = default_handler
    FORMATTER = default_formatter

@test
func test_levels():
    handler, default_handler = _setup_buffer_handler()
    logger = Logger("my-logger")

    # Debug.
    logger.level = Level.Debug
    handler.entries = []

    logger.debug("1")
    logger.info("2")
    logger.warning("3")
    logger.error("4")

    assert handler.entries == ["my-logger DEBUG 1",
                               "my-logger INFO 2",
                               "my-logger WARNING 3",
                               "my-logger ERROR 4"]

    assert logger.is_enabled_for(Level.Debug)
    assert logger.is_enabled_for(Level.Info)
    assert logger.is_enabled_for(Level.Warning)
    assert logger.is_enabled_for(Level.Error)

    # Info.
    logger.level = Level.Info
    handler.entries = []

    logger.debug("5")
    logger.info("6")
    logger.warning("7")
    logger.error("8")

    assert handler.entries == ["my-logger INFO 6",
                               "my-logger WARNING 7",
                               "my-logger ERROR 8"]

    assert not logger.is_enabled_for(Level.Debug)
    assert logger.is_enabled_for(Level.Info)
    assert logger.is_enabled_for(Level.Warning)
    assert logger.is_enabled_for(Level.Error)

    # Warning.
    logger.level = Level.Warning
    handler.entries = []

    logger.debug("9")
    logger.info("10")
    logger.warning("11")
    logger.error("12")

    assert handler.entries == ["my-logger WARNING 11",
                               "my-logger ERROR 12"]

    assert not logger.is_enabled_for(Level.Debug)
    assert not logger.is_enabled_for(Level.Info)
    assert logger.is_enabled_for(Level.Warning)
    assert logger.is_enabled_for(Level.Error)

    # Error.
    logger.level = Level.Error
    handler.entries = []

    logger.debug("13")
    logger.info("14")
    logger.warning("15")
    logger.error("16")

    assert handler.entries == ["my-logger ERROR 16"]

    assert not logger.is_enabled_for(Level.Debug)
    assert not logger.is_enabled_for(Level.Info)
    assert not logger.is_enabled_for(Level.Warning)
    assert logger.is_enabled_for(Level.Error)

    HANDLER = default_handler

@test
func test_get_logger():
    LOGGERS = {}

    foo = get_logger("foo")
    bar = get_logger("bar")

    assert foo is not bar
    assert foo is get_logger("foo")

    assert LOGGERS["foo"] is foo
    assert LOGGERS["bar"] is bar

    LOGGERS = {}
